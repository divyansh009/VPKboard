import mediapipe as mp
import cv2
import numpy as np 
import uuid
import os


keys=[["Q","W","E","R","T","Y","U","I","O","P"],
      ["A","S","D","F","G","H","J","K","L",";"],
      ["Z","X","C","V","B","N","M",",",".","/"]]


mp_drawing=mp.solutions.drawing_utils
mp_hands=mp.solutions.hands

def get_label(index,hand,results):
    output=None
    for idx,classification in enumerate(results.multi_handedness):
        if classification.classification[0].index==index:
            #Process results
            label=classification.classification[0].index
            score=classification.classification[0].score
            text='{} {}'.format(label,round(score,2))
            
            #Extract coordinates:
            coords=tuple(np.multiply(
                np.array((hand.landmark[mp_hands.HandLandmark.INDEX_FINGER_TIP].x,hand.landmark[mp_hands.HandLandmark.INDEX_FINGER_TIP].y)),
            [640,480]).astype(int))
            
            output=text,coords
            
    return output


from time import sleep
def findDistance(num):
    p1x=results.multi_hand_landmarks[num].landmark[mp_hands.HandLandmark.THUMB_TIP].x
    p1y=results.multi_hand_landmarks[num].landmark[mp_hands.HandLandmark.THUMB_TIP].y
    p2x=results.multi_hand_landmarks[num].landmark[mp_hands.HandLandmark.INDEX_FINGER_PIP].x
    p2y=results.multi_hand_landmarks[num].landmark[mp_hands.HandLandmark.INDEX_FINGER_PIP].y
    distancey=math.sqrt(((p1x-p2x)**2)+((p1y-p2y)**2))
    return distancey


#EXTRA-SMALL ONE
xi=[249,283,312,345,375,411,442,473,503,538,252,281,312,341,377,411,443,475,507,537,255,280,315,347,377,411,442,476,510,543,259,300,342,373,404,432,531]
yi=[91,90,86,83,82,79,79,79,72,71,128,130,125,125,120,115,120,115,115,115,175,172,169,165,166,162,163,162,161,156,215,214,215,212,210,211,205]
ltr=['q','w','e','r','t','y','u','i','o','p','a','s','d','f','g','h','j','k','l',';','z','x','c','v','b','n','m',',','.','/',' ',' ',' ',' ',' ',' ','*']
dist=[1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000]

import math
mini=10000
mindex=0
def find_dis(x,y):
    mini=10000
    for i in range(len(dist)):
        dist[i]=math.sqrt(((x-xi[i])**2)+((y-yi[i])**2))
        if dist[i]<mini:
            mini=dist[i]
            mindex=i
    return mindex


from matplotlib import pyplot as plt
joint_list = [[8,7,6], [12,11,10], [16,15,14], [20,19,18]]
def draw_finger_angles(image, results, joint_list):
    
    # Loop through hands
    for hand in results.multi_hand_landmarks:
        #Loop through joint sets 
        for joint in joint_list:
            a = np.array([hand.landmark[joint[0]].x, hand.landmark[joint[0]].y]) # First coord
            b = np.array([hand.landmark[joint[1]].x, hand.landmark[joint[1]].y]) # Second coord(mid pt.)
            c = np.array([hand.landmark[joint[2]].x, hand.landmark[joint[2]].y]) # Third coord
            
            radians = np.arctan2(c[1] - b[1], c[0]-b[0]) - np.arctan2(a[1]-b[1], a[0]-b[0])
            angle = np.abs(radians*180.0/np.pi)
            
            if angle > 180.0:
                angle = 360-angle
                
            cv2.putText(image, str(round(angle, 2)), tuple(np.multiply(b, [640, 480]).astype(int)),
                       cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 2, cv2.LINE_AA)
    return image


def draw_finger_angles(image, results, joint_list,lst,lst2):
    if len(results.multi_hand_landmarks)==1:
        # Loop through hands
        for hand in results.multi_hand_landmarks:
            
            #Loop through joint sets 
            tmp=0
            for joint in joint_list:
                a = np.array([hand.landmark[joint[0]].x, hand.landmark[joint[0]].y]) # First coord
                b = np.array([hand.landmark[joint[1]].x, hand.landmark[joint[1]].y]) # Second coord(mid pt.)
                c = np.array([hand.landmark[joint[2]].x, hand.landmark[joint[2]].y]) # Third coord
                
                radians = np.arctan2(c[1] - b[1], c[0]-b[0]) - np.arctan2(a[1]-b[1], a[0]-b[0])
                angle = np.abs(radians*180.0/np.pi)
                
                if angle > 180.0:
                    angle = 360-angle
                lst[tmp]=round(angle, 2)
                cv2.putText(image, str(round(angle, 2)), tuple(np.multiply(b, [640, 480]).astype(int)),
                           cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 2, cv2.LINE_AA)
                tmp+=1
    elif len(results.multi_hand_landmarks)==2:
        h1=0
        # Loop through hands
        for hand in results.multi_hand_landmarks:
            #Loop through joint sets 
            if h1==0:
                tmp=0
                for joint in joint_list:
                    a = np.array([hand.landmark[joint[0]].x, hand.landmark[joint[0]].y]) # First coord
                    b = np.array([hand.landmark[joint[1]].x, hand.landmark[joint[1]].y]) # Second coord(mid pt.)
                    c = np.array([hand.landmark[joint[2]].x, hand.landmark[joint[2]].y]) # Third coord
                    
                    radians = np.arctan2(c[1] - b[1], c[0]-b[0]) - np.arctan2(a[1]-b[1], a[0]-b[0])
                    angle = np.abs(radians*180.0/np.pi)
                    
                    if angle > 180.0:
                        angle = 360-angle
                    lst[tmp]=round(angle, 2)
                    cv2.putText(image, str(round(angle, 2)), tuple(np.multiply(b, [640, 480]).astype(int)),
                               cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 2, cv2.LINE_AA)
                    tmp+=1
            elif h1==1:
                tmp=0
                for joint in joint_list:
                    a = np.array([hand.landmark[joint[0]].x, hand.landmark[joint[0]].y]) # First coord
                    b = np.array([hand.landmark[joint[1]].x, hand.landmark[joint[1]].y]) # Second coord(mid pt.)
                    c = np.array([hand.landmark[joint[2]].x, hand.landmark[joint[2]].y]) # Third coord
                    
                    radians = np.arctan2(c[1] - b[1], c[0]-b[0]) - np.arctan2(a[1]-b[1], a[0]-b[0])
                    angle = np.abs(radians*180.0/np.pi)
                    
                    if angle > 180.0:
                        angle = 360-angle
                    lst2[tmp]=round(angle, 2)
                    cv2.putText(image, str(round(angle, 2)), tuple(np.multiply(b, [640, 480]).astype(int)),
                               cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 2, cv2.LINE_AA)
                    tmp+=1
            h1+=1
    return image


def get_label1b(index,hand,results):
    output=None
    for idx,classification in enumerate(results.multi_handedness):
        if classification.classification[0].index==index:
            #Process results
            label=classification.classification[0].index
            score=classification.classification[0].score
            text='{} {}'.format(label,round(score,2))
            
            #Extract coordinates:
            coords=tuple(np.multiply(
                np.array((hand.landmark[mp_hands.HandLandmark.INDEX_FINGER_TIP].x,hand.landmark[mp_hands.HandLandmark.INDEX_FINGER_TIP].y)),
            [640,480]).astype(int))
            
            output=text,coords
            
    return output

def get_label2b(index,hand,results):
    output=None
    for idx,classification in enumerate(results.multi_handedness):
        if classification.classification[0].index==index:
            #Process results
            label=classification.classification[0].index
            score=classification.classification[0].score
            text='{} {}'.format(label,round(score,2))
            
            #Extract coordinates:
            coords=tuple(np.multiply(
                np.array((hand.landmark[mp_hands.HandLandmark.MIDDLE_FINGER_TIP].x,hand.landmark[mp_hands.HandLandmark.MIDDLE_FINGER_TIP].y)),
            [640,480]).astype(int))
            
            output=text,coords
            
    return output

def get_label3b(index,hand,results):
    output=None
    for idx,classification in enumerate(results.multi_handedness):
        if classification.classification[0].index==index:
            #Process results
            label=classification.classification[0].index
            score=classification.classification[0].score
            text='{} {}'.format(label,round(score,2))
            
            #Extract coordinates:
            coords=tuple(np.multiply(
                np.array((hand.landmark[mp_hands.HandLandmark.RING_FINGER_TIP].x,hand.landmark[mp_hands.HandLandmark.RING_FINGER_TIP].y)),
            [640,480]).astype(int))
            
            output=text,coords
            
    return output

def get_label4b(index,hand,results):
    output=None
    for idx,classification in enumerate(results.multi_handedness):
        if classification.classification[0].index==index:
            #Process results
            label=classification.classification[0].index
            score=classification.classification[0].score
            text='{} {}'.format(label,round(score,2))
            
            #Extract coordinates:
            coords=tuple(np.multiply(
                np.array((hand.landmark[mp_hands.HandLandmark.PINKY_TIP].x,hand.landmark[mp_hands.HandLandmark.PINKY_TIP].y)),
            [640,480]).astype(int))
            
            output=text,coords
            
    return output
                    
def get_label_index(index,hand,results):
    output=None
    for idx,classification in enumerate(results.multi_handedness):
        if classification.classification[0].index==index:
            #Process results
            label=classification.classification[0].index
            score=classification.classification[0].score
            text='{} {}'.format(label,round(score,2))
            
            #Extract coordinates:
            coords=tuple(np.multiply(
                np.array((hand.landmark[mp_hands.HandLandmark.INDEX_FINGER_TIP].x,hand.landmark[mp_hands.HandLandmark.INDEX_FINGER_TIP].y)),
            [640,480]).astype(int))
            
            output=text,coords
            
    return output
def get_label_middle(index,hand,results):
    output=None
    for idx,classification in enumerate(results.multi_handedness):
        if classification.classification[0].index==index:
            #Process results
            label=classification.classification[0].index
            score=classification.classification[0].score
            text='{} {}'.format(label,round(score,2))
            
            #Extract coordinates:
            coords=tuple(np.multiply(
                np.array((hand.landmark[mp_hands.HandLandmark.MIDDLE_FINGER_TIP].x,hand.landmark[mp_hands.HandLandmark.MIDDLE_FINGER_TIP].y)),
            [640,480]).astype(int))
            
            output=text,coords
            
    return output

def get_label_ring(index,hand,results):
    output=None
    for idx,classification in enumerate(results.multi_handedness):
        if classification.classification[0].index==index:
            #Process results
            label=classification.classification[0].index
            score=classification.classification[0].score
            text='{} {}'.format(label,round(score,2))
            
            #Extract coordinates:
            coords=tuple(np.multiply(
                np.array((hand.landmark[mp_hands.HandLandmark.RING_FINGER_TIP].x,hand.landmark[mp_hands.HandLandmark.RING_FINGER_TIP].y)),
            [640,480]).astype(int))
            
            output=text,coords
            
    return output

def get_label_pinky(index,hand,results):
    output=None
    for idx,classification in enumerate(results.multi_handedness):
        if classification.classification[0].index==index:
            #Process results
            label=classification.classification[0].index
            score=classification.classification[0].score
            text='{} {}'.format(label,round(score,2))
            
            #Extract coordinates:
            coords=tuple(np.multiply(
                np.array((hand.landmark[mp_hands.HandLandmark.PINKY_TIP].x,hand.landmark[mp_hands.HandLandmark.PINKY_TIP].y)),
            [640,480]).astype(int))
            
            output=text,coords
            
    return output


d1={0: [179.26,
  179.6,
  179.87,
  179.33,
  179.03,
  178.17,
  179.18,
  168.24,
  154.14,
  143.01,
  149.6,
  134.73,
  141.4,
  99.83,
  156.23,
  127.61,
  100.82,
  163.11,
  176.08,
  178.05,
  178.96,
  178.91,
  178.91,
  179.36,
  178.33,
  178.41,
  178.96,
  179.64,
  179.25,
  179.89],
 1: [175.8,
  177.61,
  176.55,
  175.96,
  176.5,
  178.24,
  176.5,
  179.34,
  176.91,
  163.77,
  168.65,
  179.67,
  168.05,
  173.82,
  169.05,
  170.6,
  156.89,
  167.97,
  135.96,
  178.97,
  177.97,
  177.36,
  177.05,
  176.35,
  177.48,
  176.32,
  178.27,
  177.0,
  176.95,
  177.11],
 2: [177.17,
  176.99,
  177.21,
  176.5,
  176.02,
  174.07,
  173.48,
  171.05,
  133.06,
  156.77,
  47.6,
  162.22,
  55.89,
  32.28,
  174.18,
  174.33,
  175.65,
  178.1,
  176.58,
  177.75,
  177.6,
  175.43,
  177.33,
  177.16,
  176.35,
  177.78,
  175.76,
  176.9,
  176.28,
  176.35],
 3: [176.26,
  177.95,
  179.2,
  178.36,
  178.11,
  179.52,
  177.35,
  179.16,
  176.29,
  175.68,
  175.52,
  178.77,
  170.38,
  40.2,
  171.1,
  168.24,
  177.29,
  178.11,
  176.78,
  178.29,
  178.58,
  177.88,
  178.9,
  178.65,
  177.15,
  177.69,
  178.01,
  178.02,
  178.56,
  178.08],
 4: [179.79,
  179.96,
  179.92,
  179.3,
  178.9,
  178.56,
  179.79,
  175.74,
  169.92,
  175.53,
  177.38,
  178.92,
  173.91,
  170.21,
  178.62,
  147.6,
  179.24,
  177.26,
  178.79,
  179.41,
  179.6,
  179.87,
  178.33,
  179.29,
  178.68,
  177.95,
  179.39,
  179.84,
  179.26,
  179.03],
 5: [178.61,
  179.08,
  179.99,
  177.02,
  178.93,
  177.07,
  179.94,
  102.15,
  166.06,
  46.84,
  162.99,
  139.5,
  173.67,
  19.66,
  2.33,
  176.77,
  179.54,
  179.33,
  178.96,
  177.61,
  177.58,
  179.56,
  179.57,
  179.51,
  177.93,
  179.07,
  178.62,
  178.7,
  178.72,
  176.75],
 6: [179.49,
  179.64,
  179.67,
  179.08,
  178.04,
  178.17,
  176.76,
  179.9,
  173.26,
  171.8,
  166.44,
  171.55,
  171.17,
  169.75,
  172.67,
  167.22,
  175.1,
  176.53,
  177.45,
  176.69,
  177.35,
  176.68,
  178.37,
  178.31,
  177.94,
  177.07,
  178.5,
  177.78,
  178.95,
  177.8],
 7: [179.31,
  176.15,
  177.53,
  178.56,
  177.24,
  178.09,
  177.33,
  177.29,
  178.17,
  176.64,
  175.52,
  169.8,
  179.75,
  179.8,
  178.2,
  178.87,
  177.82,
  179.17,
  177.03,
  178.72,
  179.92,
  179.17,
  179.01,
  179.58,
  179.24,
  179.18,
  178.4,
  179.11,
  179.27,
  179.03],
 8: [178.63,
  177.97,
  176.99,
  176.97,
  169.59,
  79.99,
  41.86,
  24.2,
  37.17,
  31.62,
  84.77,
  179.75,
  178.83,
  178.91,
  178.25,
  178.49,
  178.95,
  179.35,
  179.13,
  178.27,
  179.18,
  179.77,
  178.15,
  179.32,
  178.42,
  179.07,
  179.51,
  179.25,
  178.06,
  179.03],
 9: [179.89,
  179.68,
  178.85,
  179.56,
  179.38,
  178.39,
  175.84,
  161.79,
  161.55,
  21.13,
  7.25,
  29.18,
  0.94,
  6.44,
  13.2,
  167.96,
  175.67,
  179.75,
  179.19,
  178.53,
  179.93,
  179.41,
  178.84,
  179.3,
  176.81,
  177.75,
  176.71,
  176.82,
  177.65,
  177.99],
 10: [178.46,
  179.87,
  178.56,
  179.21,
  178.25,
  177.83,
  179.5,
  166.36,
  84.56,
  162.2,
  33.19,
  86.21,
  46.58,
  71.79,
  82.88,
  49.48,
  179.52,
  178.14,
  178.86,
  179.49,
  179.35,
  179.9,
  179.97,
  179.24,
  179.66,
  179.51,
  179.86,
  179.41,
  178.71,
  179.97],
 11: [179.75,
  178.44,
  178.0,
  179.78,
  178.98,
  177.97,
  179.75,
  177.48,
  176.88,
  174.24,
  4.35,
  11.68,
  11.56,
  1.69,
  4.53,
  15.78,
  20.56,
  6.49,
  19.79,
  15.2,
  171.61,
  179.78,
  178.98,
  179.41,
  178.73,
  178.85,
  179.46,
  179.84,
  179.32,
  179.53],
 12: [177.64,
  178.7,
  177.79,
  177.18,
  177.62,
  177.44,
  179.03,
  178.26,
  175.98,
  56.51,
  51.94,
  129.05,
  117.87,
  124.42,
  114.12,
  77.89,
  105.35,
  122.67,
  130.7,
  159.84,
  177.08,
  179.74,
  178.14,
  178.1,
  179.76,
  179.48,
  179.99,
  179.7,
  179.96,
  179.47],
 13: [177.5,
  176.87,
  177.18,
  177.38,
  177.62,
  177.49,
  177.88,
  178.73,
  176.41,
  176.92,
  179.71,
  150.37,
  168.79,
  113.32,
  143.27,
  82.4,
  84.96,
  77.67,
  132.73,
  127.47,
  86.02,
  89.06,
  176.29,
  179.84,
  178.37,
  179.1,
  177.67,
  177.97,
  177.57,
  179.35],
 14: [177.51,
  176.74,
  176.19,
  177.88,
  176.81,
  179.42,
  179.07,
  179.4,
  173.59,
  76.15,
  126.68,
  41.63,
  40.79,
  62.88,
  58.4,
  63.06,
  44.03,
  52.91,
  52.0,
  55.69,
  169.36,
  177.46,
  177.72,
  179.27,
  178.51,
  178.25,
  178.58,
  178.41,
  178.95,
  177.73],
 15: [177.14,
  177.3,
  176.35,
  176.84,
  176.34,
  176.38,
  177.4,
  176.07,
  178.0,
  176.86,
  179.0,
  173.57,
  171.29,
  175.05,
  143.04,
  173.35,
  175.71,
  179.49,
  178.41,
  177.01,
  176.9,
  177.95,
  176.99,
  176.46,
  176.17,
  176.6,
  177.43,
  176.8,
  176.6,
  176.84],
 16: [177.78,
  177.84,
  177.28,
  178.01,
  178.06,
  178.15,
  176.95,
  177.69,
  177.18,
  177.73,
  178.76,
  170.17,
  126.76,
  103.57,
  84.88,
  137.36,
  108.59,
  173.62,
  178.92,
  178.93,
  179.26,
  176.66,
  176.09,
  177.15,
  177.83,
  176.68,
  176.38,
  176.88,
  176.44,
  177.09],
 17: [176.73,
  176.95,
  178.26,
  175.46,
  174.63,
  168.74,
  144.25,
  152.12,
  146.34,
  105.89,
  145.43,
  154.15,
  172.74,
  177.62,
  177.86,
  177.47,
  177.02,
  176.3,
  176.26,
  176.14,
  175.85,
  175.94,
  176.33,
  175.93,
  176.72,
  176.51,
  176.2,
  175.95,
  176.17,
  176.34],
 18: [177.24,
  176.94,
  177.19,
  177.64,
  178.54,
  178.84,
  175.03,
  161.94,
  153.13,
  157.19,
  150.09,
  174.37,
  161.99,
  177.0,
  178.08,
  177.53,
  177.8,
  178.13,
  177.21,
  178.44,
  178.83,
  178.92,
  177.81,
  178.38,
  177.35,
  177.59,
  176.28,
  177.43,
  177.71,
  177.74],
 19: [178.01,
  178.45,
  179.49,
  178.1,
  179.38,
  179.89,
  178.0,
  174.62,
  171.5,
  169.47,
  159.04,
  152.7,
  156.43,
  150.57,
  156.15,
  155.01,
  162.51,
  163.51,
  166.18,
  175.83,
  177.12,
  178.91,
  179.55,
  179.8,
  179.48,
  179.8,
  178.85,
  179.41,
  179.41,
  179.87],
 20: [179.8,
  179.48,
  179.61,
  179.96,
  179.22,
  179.73,
  179.26,
  178.57,
  176.03,
  172.27,
  176.07,
  171.14,
  172.54,
  175.07,
  179.73,
  178.76,
  179.67,
  179.88,
  178.93,
  179.81,
  179.77,
  179.9,
  179.94,
  179.5,
  179.59,
  179.19,
  179.33,
  179.83,
  179.21,
  179.78],
 21: [179.82,
  179.67,
  179.72,
  179.97,
  179.34,
  179.48,
  179.72,
  179.2,
  179.35,
  179.97,
  178.08,
  178.82,
  179.88,
  176.33,
  175.9,
  174.45,
  176.96,
  178.51,
  179.01,
  179.77,
  179.85,
  179.36,
  179.7,
  179.14,
  178.22,
  178.78,
  178.63,
  178.59,
  177.76,
  179.05],
 22: [179.71,
  179.98,
  179.32,
  179.89,
  179.51,
  179.54,
  179.62,
  179.87,
  179.7,
  178.61,
  177.93,
  176.33,
  174.86,
  164.63,
  170.58,
  158.11,
  171.9,
  151.25,
  176.84,
  175.73,
  177.6,
  178.4,
  178.8,
  178.77,
  179.3,
  179.54,
  179.58,
  179.34,
  178.52,
  179.86],
 23: [179.7,
  179.91,
  179.34,
  178.97,
  179.29,
  177.99,
  177.95,
  179.46,
  177.51,
  176.35,
  172.25,
  163.59,
  168.68,
  173.54,
  178.26,
  172.97,
  179.08,
  179.53,
  177.46,
  179.27,
  179.47,
  178.23,
  179.13,
  179.07,
  179.64,
  179.85,
  179.54,
  178.81,
  178.54,
  178.78],
 24: [179.79,
  179.23,
  178.97,
  179.44,
  179.0,
  179.58,
  179.53,
  174.51,
  174.97,
  173.4,
  176.34,
  172.24,
  175.9,
  177.15,
  177.9,
  177.57,
  179.28,
  179.26,
  179.72,
  179.52,
  179.94,
  179.71,
  179.57,
  179.52,
  179.49,
  179.92,
  179.94,
  179.41,
  179.4,
  179.85]}

d2={0: [178.9,
  179.63,
  180.0,
  179.5,
  179.71,
  179.05,
  179.79,
  174.26,
  136.52,
  65.81,
  52.39,
  37.56,
  37.14,
  34.05,
  42.04,
  166.49,
  179.91,
  179.27,
  178.55,
  178.88,
  177.97,
  178.0,
  179.45,
  176.81,
  178.97,
  178.88,
  179.86,
  179.0,
  179.58,
  179.89],
 1: [179.33,
  179.27,
  179.86,
  178.92,
  178.31,
  174.7,
  173.45,
  136.25,
  159.96,
  10.2,
  40.19,
  173.71,
  3.75,
  70.66,
  166.54,
  175.8,
  178.31,
  178.88,
  179.94,
  177.34,
  178.08,
  179.32,
  178.92,
  179.55,
  179.2,
  179.98,
  179.94,
  179.94,
  179.7,
  179.57],
 2: [179.75,
  179.11,
  179.21,
  178.76,
  179.25,
  179.79,
  179.52,
  179.28,
  179.84,
  179.37,
  179.63,
  173.23,
  168.05,
  142.81,
  163.56,
  166.14,
  166.66,
  113.14,
  173.86,
  166.72,
  171.16,
  172.66,
  179.62,
  177.3,
  179.85,
  179.69,
  179.5,
  179.67,
  179.55,
  178.84],
 3: [178.1,
  177.95,
  179.39,
  178.71,
  179.37,
  176.57,
  167.13,
  178.77,
  66.35,
  153.01,
  8.58,
  2.47,
  0.75,
  41.52,
  4.93,
  161.99,
  174.94,
  177.55,
  177.53,
  178.95,
  179.69,
  179.26,
  179.95,
  179.68,
  178.64,
  179.42,
  178.17,
  179.83,
  179.97,
  179.36],
 4: [179.7,
  179.68,
  179.6,
  179.77,
  179.54,
  179.65,
  179.06,
  177.56,
  169.27,
  167.26,
  10.34,
  175.25,
  30.08,
  11.69,
  101.03,
  158.43,
  166.65,
  179.69,
  179.33,
  179.32,
  178.79,
  179.99,
  179.51,
  179.13,
  178.42,
  178.05,
  179.55,
  178.86,
  177.49,
  178.45],
 5: [179.11,
  179.8,
  179.59,
  179.03,
  179.84,
  178.34,
  175.29,
  176.32,
  176.0,
  175.83,
  176.56,
  175.35,
  175.88,
  174.66,
  178.08,
  175.67,
  176.21,
  177.94,
  179.01,
  179.63,
  178.3,
  178.27,
  179.47,
  179.45,
  179.81,
  179.91,
  178.91,
  179.76,
  179.63,
  179.96],
 6: [179.34,
  179.87,
  179.4,
  179.64,
  179.4,
  179.61,
  179.68,
  178.08,
  176.67,
  173.78,
  151.76,
  175.97,
  155.67,
  146.57,
  160.86,
  87.17,
  174.82,
  178.47,
  177.32,
  178.2,
  178.75,
  179.23,
  178.84,
  178.98,
  178.38,
  179.11,
  178.79,
  179.06,
  178.74,
  177.83],
 7: [179.74,
  179.54,
  178.6,
  179.92,
  179.19,
  179.42,
  179.88,
  178.57,
  179.0,
  177.17,
  174.93,
  179.46,
  70.73,
  175.79,
  98.96,
  179.52,
  177.14,
  164.01,
  179.46,
  179.23,
  179.02,
  179.3,
  178.6,
  178.48,
  179.84,
  179.15,
  178.97,
  178.92,
  179.31,
  178.71],
 8: [178.4,
  179.96,
  178.97,
  178.71,
  179.76,
  178.97,
  179.53,
  178.53,
  179.48,
  178.76,
  177.59,
  177.12,
  150.57,
  48.73,
  31.06,
  165.88,
  179.3,
  121.6,
  175.29,
  179.88,
  177.5,
  178.16,
  178.31,
  179.4,
  179.5,
  179.69,
  178.13,
  179.42,
  179.34,
  179.8],
 9: [179.12,
  179.75,
  179.37,
  179.77,
  177.79,
  179.17,
  169.23,
  93.56,
  36.13,
  36.04,
  39.94,
  28.69,
  106.7,
  173.64,
  179.44,
  179.93,
  179.48,
  179.78,
  178.54,
  178.83,
  179.02,
  179.43,
  179.73,
  179.93,
  179.7,
  179.36,
  178.91,
  179.34,
  178.86,
  178.6],
 10: [178.37,
  177.24,
  177.65,
  177.96,
  178.45,
  178.42,
  177.43,
  178.86,
  180.0,
  178.06,
  32.95,
  82.61,
  22.6,
  41.67,
  30.28,
  60.15,
  179.97,
  179.87,
  179.34,
  178.08,
  178.21,
  178.03,
  178.69,
  177.85,
  177.38,
  179.15,
  178.19,
  177.79,
  179.59,
  177.63],
 11: [175.86,
  175.81,
  175.74,
  176.72,
  177.28,
  176.94,
  165.06,
  167.54,
  87.77,
  26.89,
  176.38,
  74.13,
  176.52,
  174.11,
  162.12,
  175.72,
  178.3,
  177.85,
  176.72,
  176.28,
  175.02,
  177.09,
  177.27,
  176.52,
  176.84,
  176.33,
  175.89,
  177.27,
  178.63,
  177.47],
 12: [178.95,
  178.53,
  178.89,
  179.48,
  179.48,
  179.48,
  179.56,
  179.65,
  176.17,
  170.82,
  172.55,
  166.25,
  170.59,
  167.72,
  174.77,
  175.35,
  176.97,
  178.36,
  178.21,
  178.12,
  179.23,
  178.34,
  178.35,
  177.32,
  177.99,
  179.31,
  178.48,
  179.67,
  178.93,
  179.96],
 13: [177.82,
  177.62,
  177.9,
  177.54,
  178.42,
  179.13,
  179.45,
  177.16,
  172.69,
  173.27,
  171.84,
  174.31,
  172.41,
  171.83,
  169.46,
  176.1,
  176.15,
  179.82,
  178.71,
  177.9,
  178.13,
  178.46,
  178.67,
  178.01,
  177.5,
  177.53,
  177.18,
  176.62,
  178.1,
  176.22],
 14: [179.86,
  179.43,
  178.84,
  178.82,
  179.06,
  178.66,
  176.7,
  174.04,
  141.78,
  41.64,
  44.21,
  39.11,
  142.12,
  58.88,
  165.65,
  160.7,
  168.46,
  174.86,
  175.9,
  178.8,
  178.9,
  178.86,
  178.72,
  178.67,
  178.64,
  178.4,
  178.33,
  179.6,
  179.83,
  179.21],
 15: [179.74,
  179.31,
  179.61,
  179.26,
  176.77,
  177.96,
  176.04,
  176.4,
  178.09,
  175.83,
  175.93,
  170.71,
  167.58,
  175.77,
  170.46,
  164.12,
  24.99,
  173.64,
  179.42,
  164.26,
  178.99,
  178.52,
  179.65,
  179.49,
  178.41,
  178.89,
  178.76,
  178.35,
  178.52,
  178.67],
 16: [179.23,
  179.55,
  179.51,
  179.86,
  179.34,
  178.69,
  176.44,
  177.68,
  169.07,
  116.91,
  159.5,
  148.55,
  66.86,
  71.82,
  51.93,
  75.15,
  171.34,
  175.69,
  176.95,
  178.86,
  179.22,
  178.78,
  179.48,
  179.77,
  179.47,
  179.6,
  179.43,
  179.73,
  179.74,
  179.53],
 17: [179.0,
  179.85,
  179.8,
  179.21,
  178.61,
  179.39,
  178.86,
  179.35,
  179.93,
  179.32,
  179.49,
  178.0,
  179.39,
  179.37,
  173.13,
  35.89,
  174.76,
  173.47,
  174.94,
  178.53,
  167.62,
  178.38,
  179.04,
  178.35,
  179.6,
  179.38,
  179.8,
  179.52,
  178.98,
  179.64],
 18: [178.22,
  178.35,
  178.73,
  178.25,
  178.65,
  178.68,
  179.86,
  176.65,
  176.46,
  172.68,
  164.96,
  172.12,
  174.95,
  173.66,
  176.16,
  177.44,
  179.48,
  178.47,
  179.01,
  178.82,
  178.18,
  179.24,
  178.74,
  178.44,
  179.22,
  179.28,
  178.93,
  178.15,
  178.71,
  179.04],
 19: [179.53,
  178.28,
  179.87,
  178.86,
  179.64,
  178.89,
  178.86,
  179.59,
  179.78,
  179.46,
  177.05,
  173.98,
  176.39,
  175.93,
  174.89,
  176.03,
  174.46,
  175.79,
  178.8,
  179.79,
  179.41,
  178.68,
  179.22,
  179.15,
  178.5,
  178.87,
  178.53,
  179.39,
  178.48,
  179.83],
 20: [179.1,
  179.69,
  179.46,
  178.65,
  172.93,
  146.91,
  11.49,
  85.2,
  160.5,
  159.49,
  158.45,
  172.36,
  171.04,
  177.35,
  179.72,
  179.18,
  179.03,
  179.57,
  179.87,
  179.33,
  179.38,
  179.63,
  179.97,
  179.98,
  179.84,
  179.43,
  179.56,
  179.79,
  179.77,
  179.85],
 21: [179.78,
  179.61,
  179.52,
  179.75,
  179.64,
  179.58,
  179.42,
  177.25,
  177.96,
  175.79,
  173.33,
  172.63,
  168.44,
  172.58,
  170.26,
  172.14,
  170.12,
  173.32,
  176.61,
  177.96,
  179.01,
  179.75,
  179.62,
  179.95,
  179.93,
  179.83,
  179.6,
  179.47,
  179.19,
  179.69],
 22: [179.86,
  179.55,
  179.51,
  177.75,
  176.85,
  173.37,
  163.16,
  173.23,
  168.78,
  143.33,
  169.93,
  173.72,
  35.33,
  179.0,
  179.51,
  179.12,
  179.65,
  179.16,
  178.86,
  179.08,
  178.89,
  178.61,
  179.3,
  179.73,
  179.8,
  178.87,
  179.94,
  179.8,
  179.72,
  179.45],
 23: [179.28,
  179.81,
  179.97,
  179.95,
  179.17,
  178.48,
  179.03,
  176.21,
  177.02,
  172.82,
  175.5,
  174.34,
  167.02,
  174.29,
  175.47,
  176.4,
  176.31,
  179.37,
  179.51,
  179.25,
  179.96,
  179.69,
  179.76,
  179.62,
  179.61,
  179.28,
  179.83,
  179.76,
  179.66,
  179.91],
 24: [177.76,
  178.17,
  177.91,
  177.99,
  177.05,
  177.25,
  177.59,
  178.46,
  177.9,
  178.01,
  178.48,
  179.76,
  179.68,
  178.36,
  179.13,
  157.69,
  170.76,
  168.06,
  179.76,
  177.88,
  179.57,
  179.87,
  179.52,
  179.4,
  179.96,
  178.79,
  179.19,
  178.61,
  178.46,
  178.92]}

d3={0: [177.85,
  175.67,
  176.45,
  176.64,
  175.2,
  175.39,
  171.41,
  169.18,
  145.11,
  123.56,
  97.55,
  77.47,
  98.74,
  109.16,
  88.46,
  137.59,
  139.21,
  154.21,
  172.91,
  170.3,
  176.79,
  178.23,
  177.12,
  177.0,
  177.19,
  176.76,
  176.94,
  176.68,
  177.51,
  178.18],
 1: [178.57,
  178.65,
  175.89,
  177.37,
  176.35,
  179.03,
  178.81,
  179.59,
  179.3,
  179.83,
  179.66,
  178.0,
  86.02,
  141.62,
  138.73,
  74.77,
  165.69,
  144.49,
  171.51,
  179.72,
  175.46,
  176.94,
  175.79,
  176.35,
  175.99,
  175.72,
  176.91,
  176.76,
  176.45,
  177.07],
 2: [176.37,
  176.74,
  176.2,
  175.11,
  174.78,
  175.74,
  175.87,
  175.45,
  175.7,
  176.72,
  176.69,
  178.9,
  176.96,
  166.09,
  177.48,
  165.94,
  165.24,
  176.35,
  171.95,
  152.41,
  172.35,
  179.77,
  178.81,
  178.61,
  175.96,
  176.64,
  177.13,
  176.32,
  175.91,
  176.06],
 3: [176.62,
  176.6,
  175.67,
  176.8,
  178.09,
  55.92,
  41.75,
  101.55,
  63.51,
  66.98,
  43.8,
  161.44,
  173.33,
  177.16,
  179.68,
  177.29,
  178.16,
  177.11,
  176.36,
  176.34,
  177.06,
  177.7,
  177.61,
  177.98,
  177.48,
  177.0,
  176.16,
  177.78,
  176.29,
  176.23],
 4: [176.23,
  176.79,
  175.54,
  174.56,
  176.32,
  175.54,
  176.25,
  174.83,
  174.43,
  174.93,
  13.48,
  23.24,
  7.78,
  14.95,
  170.9,
  7.79,
  32.28,
  122.2,
  175.22,
  178.26,
  178.37,
  176.81,
  175.45,
  176.83,
  177.54,
  176.41,
  177.81,
  176.79,
  179.81,
  175.65],
 5: [178.34,
  179.15,
  176.59,
  176.24,
  177.5,
  176.04,
  176.09,
  174.54,
  176.68,
  176.34,
  177.48,
  178.61,
  172.21,
  7.47,
  28.05,
  40.31,
  5.33,
  19.65,
  120.83,
  61.71,
  174.91,
  171.88,
  177.78,
  179.05,
  176.92,
  177.01,
  176.91,
  177.31,
  176.73,
  177.3],
 6: [178.5,
  177.33,
  178.21,
  177.95,
  177.71,
  177.1,
  177.06,
  177.92,
  178.31,
  178.93,
  177.97,
  176.83,
  22.87,
  50.92,
  52.1,
  34.3,
  45.9,
  154.3,
  37.67,
  109.76,
  42.47,
  51.77,
  62.46,
  79.18,
  169.94,
  176.7,
  174.17,
  177.87,
  178.81,
  178.7],
 7: [177.52,
  176.87,
  175.79,
  177.73,
  174.78,
  175.5,
  175.27,
  176.14,
  175.9,
  175.98,
  176.63,
  177.72,
  175.24,
  177.13,
  176.32,
  155.32,
  175.2,
  168.91,
  173.88,
  172.15,
  178.0,
  177.79,
  166.98,
  177.33,
  172.73,
  171.63,
  178.23,
  178.9,
  179.68,
  179.97],
 8: [179.2,
  178.61,
  179.25,
  179.65,
  178.31,
  178.69,
  179.54,
  178.25,
  167.2,
  120.14,
  136.12,
  97.21,
  91.68,
  78.82,
  91.53,
  119.23,
  103.42,
  172.06,
  168.56,
  178.32,
  179.18,
  178.76,
  178.79,
  178.36,
  179.5,
  179.59,
  179.33,
  178.65,
  179.62,
  179.33],
 9: [176.98,
  179.11,
  178.08,
  177.46,
  170.38,
  149.5,
  95.85,
  123.59,
  126.69,
  108.19,
  85.52,
  113.75,
  107.38,
  100.42,
  169.97,
  178.37,
  177.04,
  177.05,
  177.1,
  177.46,
  176.28,
  174.63,
  175.77,
  175.77,
  176.2,
  177.7,
  177.69,
  177.35,
  179.2,
  178.78],
 10: [178.63,
  179.18,
  179.36,
  179.76,
  179.37,
  178.9,
  177.45,
  176.08,
  173.51,
  169.61,
  122.08,
  37.8,
  15.61,
  114.06,
  102.34,
  58.99,
  46.96,
  74.9,
  136.58,
  89.19,
  165.88,
  179.88,
  179.61,
  179.13,
  178.18,
  178.86,
  178.5,
  177.96,
  177.58,
  176.48],
 11: [177.15,
  177.06,
  176.39,
  177.36,
  176.41,
  177.16,
  177.81,
  174.73,
  102.21,
  111.93,
  115.95,
  105.38,
  128.4,
  123.46,
  114.44,
  102.27,
  144.72,
  123.18,
  173.1,
  177.0,
  177.35,
  177.37,
  177.79,
  176.7,
  177.8,
  177.58,
  176.75,
  177.17,
  177.87,
  177.88],
 12: [177.98,
  179.15,
  178.55,
  179.45,
  179.09,
  179.57,
  179.99,
  178.82,
  179.15,
  176.75,
  178.22,
  92.15,
  77.15,
  152.83,
  105.67,
  123.79,
  106.95,
  172.14,
  179.69,
  179.52,
  178.7,
  177.92,
  178.18,
  178.39,
  177.86,
  177.38,
  177.8,
  178.27,
  177.86,
  177.29],
 13: [178.78,
  178.31,
  178.85,
  179.54,
  178.01,
  172.14,
  38.25,
  12.39,
  30.24,
  82.73,
  85.98,
  65.8,
  40.34,
  9.49,
  177.7,
  179.57,
  179.48,
  179.37,
  179.23,
  179.72,
  179.46,
  179.78,
  179.01,
  179.97,
  179.55,
  179.78,
  179.66,
  178.96,
  179.54,
  178.84],
 14: [177.38,
  177.91,
  179.4,
  179.37,
  178.87,
  178.65,
  155.32,
  6.12,
  168.9,
  170.02,
  168.82,
  159.94,
  179.73,
  173.7,
  177.82,
  178.22,
  179.96,
  179.87,
  179.89,
  179.94,
  179.38,
  179.97,
  179.26,
  179.22,
  178.22,
  178.8,
  178.89,
  177.63,
  178.32,
  179.99],
 15: [177.56,
  178.47,
  178.18,
  178.89,
  177.93,
  178.0,
  179.36,
  179.48,
  175.93,
  176.52,
  123.33,
  173.52,
  178.67,
  179.94,
  179.88,
  179.99,
  178.85,
  179.99,
  179.72,
  179.57,
  179.43,
  179.63,
  179.46,
  179.58,
  179.63,
  179.68,
  179.54,
  179.88,
  179.1,
  179.13],
 16: [178.79,
  179.16,
  179.09,
  179.23,
  179.69,
  179.75,
  179.84,
  179.7,
  179.77,
  179.48,
  179.36,
  169.91,
  134.81,
  100.64,
  136.58,
  164.22,
  172.77,
  158.32,
  173.97,
  164.66,
  177.73,
  175.56,
  178.32,
  178.47,
  178.69,
  179.81,
  179.26,
  179.13,
  179.44,
  179.56],
 17: [179.46,
  179.49,
  179.65,
  179.96,
  179.83,
  179.99,
  179.66,
  179.45,
  179.78,
  179.82,
  179.15,
  178.55,
  177.62,
  178.99,
  176.62,
  174.43,
  175.59,
  176.16,
  179.37,
  179.44,
  179.83,
  178.79,
  179.65,
  179.67,
  179.88,
  179.08,
  179.7,
  179.72,
  179.72,
  179.49],
 18: [175.83,
  176.24,
  176.86,
  177.77,
  176.95,
  176.3,
  176.71,
  175.58,
  171.93,
  143.89,
  123.06,
  129.71,
  139.19,
  139.79,
  141.89,
  135.52,
  152.13,
  139.92,
  157.54,
  173.81,
  177.54,
  176.58,
  176.81,
  176.68,
  175.81,
  176.57,
  176.24,
  175.7,
  176.84,
  176.03],
 19: [177.86,
  178.84,
  178.83,
  179.75,
  172.03,
  61.41,
  57.34,
  54.31,
  67.82,
  55.56,
  61.64,
  70.84,
  177.87,
  179.09,
  178.94,
  179.32,
  179.36,
  178.95,
  179.19,
  177.63,
  179.42,
  178.3,
  179.23,
  179.13,
  178.0,
  176.37,
  176.35,
  175.98,
  176.38,
  175.85],
 20: [179.07,
  178.1,
  179.11,
  178.47,
  178.8,
  179.48,
  178.84,
  179.43,
  178.77,
  178.23,
  177.13,
  178.43,
  175.02,
  178.38,
  179.15,
  179.85,
  178.79,
  179.92,
  179.66,
  178.44,
  177.94,
  179.3,
  178.65,
  178.93,
  179.15,
  178.21,
  179.43,
  179.89,
  179.0,
  178.23],
 21: [177.99,
  177.23,
  177.04,
  177.46,
  176.75,
  178.13,
  179.06,
  177.88,
  177.47,
  179.04,
  179.52,
  127.95,
  178.08,
  173.09,
  155.97,
  129.08,
  154.31,
  170.8,
  173.13,
  176.44,
  178.37,
  177.86,
  179.46,
  178.9,
  178.76,
  179.04,
  178.89,
  178.04,
  179.09,
  178.55],
 22: [178.46,
  178.44,
  178.45,
  178.27,
  178.27,
  178.72,
  178.65,
  177.9,
  179.84,
  179.49,
  179.9,
  179.84,
  166.01,
  178.03,
  179.64,
  178.59,
  179.88,
  178.32,
  179.01,
  179.72,
  179.3,
  177.35,
  179.9,
  177.67,
  178.25,
  178.7,
  178.54,
  178.59,
  178.11,
  178.25],
 23: [178.37,
  175.3,
  176.97,
  177.02,
  176.6,
  176.53,
  176.47,
  175.93,
  176.69,
  177.45,
  179.66,
  178.76,
  179.28,
  177.25,
  16.68,
  34.34,
  169.81,
  24.93,
  36.78,
  145.39,
  47.34,
  177.17,
  178.22,
  179.54,
  179.9,
  179.32,
  178.98,
  179.29,
  178.4,
  178.4],
 24: [178.32,
  177.55,
  177.92,
  177.68,
  177.87,
  178.87,
  178.0,
  177.88,
  174.31,
  178.32,
  158.78,
  139.27,
  143.59,
  139.72,
  171.94,
  177.64,
  179.73,
  179.49,
  179.11,
  179.55,
  178.68,
  177.64,
  177.58,
  177.64,
  177.47,
  178.15,
  177.76,
  178.43,
  178.13,
  177.94]}

d4={0: [177.74,
  178.6,
  177.94,
  178.9,
  180.0,
  178.18,
  177.02,
  174.64,
  156.29,
  32.81,
  78.22,
  147.4,
  80.43,
  30.98,
  20.33,
  179.31,
  49.08,
  36.12,
  3.51,
  179.28,
  178.2,
  179.86,
  178.96,
  178.0,
  178.58,
  179.08,
  179.43,
  179.53,
  179.14,
  176.99],
 1: [179.81,
  178.92,
  178.57,
  179.23,
  177.99,
  22.39,
  14.68,
  53.95,
  30.31,
  41.73,
  66.45,
  27.21,
  48.42,
  171.93,
  179.57,
  178.93,
  178.48,
  178.46,
  178.42,
  179.32,
  179.91,
  178.51,
  178.81,
  179.22,
  179.04,
  176.82,
  176.96,
  179.06,
  178.33,
  176.9],
 2: [176.34,
  175.16,
  175.14,
  175.99,
  176.55,
  176.85,
  176.37,
  178.21,
  174.01,
  173.44,
  172.84,
  173.32,
  146.05,
  153.78,
  137.77,
  150.71,
  73.69,
  136.84,
  167.2,
  174.01,
  172.7,
  171.07,
  174.49,
  174.94,
  173.59,
  175.6,
  174.73,
  172.8,
  173.4,
  174.01],
 3: [173.86,
  175.74,
  177.17,
  178.3,
  177.74,
  177.85,
  175.12,
  173.79,
  173.73,
  160.24,
  175.44,
  177.18,
  174.22,
  173.58,
  172.76,
  175.87,
  175.81,
  174.26,
  176.93,
  176.36,
  174.3,
  176.03,
  176.2,
  175.91,
  175.58,
  177.45,
  176.66,
  175.3,
  176.96,
  176.24],
 4: [174.74,
  174.65,
  175.81,
  174.58,
  174.55,
  176.73,
  177.19,
  175.59,
  177.66,
  175.9,
  178.42,
  173.83,
  169.73,
  174.82,
  170.33,
  175.02,
  178.57,
  173.54,
  175.94,
  175.26,
  175.12,
  173.38,
  174.42,
  176.45,
  176.43,
  176.38,
  177.73,
  176.46,
  177.06,
  178.5],
 5: [177.03,
  175.56,
  176.57,
  177.05,
  176.84,
  174.52,
  172.71,
  173.28,
  171.62,
  172.1,
  172.06,
  173.82,
  173.23,
  172.49,
  171.6,
  172.72,
  173.96,
  173.74,
  173.37,
  173.83,
  175.21,
  175.01,
  174.51,
  174.85,
  174.31,
  174.46,
  174.62,
  174.68,
  175.31,
  176.66],
 6: [174.16,
  173.78,
  173.87,
  172.38,
  175.01,
  173.61,
  173.85,
  173.2,
  175.23,
  174.3,
  171.72,
  170.55,
  170.7,
  169.76,
  171.71,
  168.3,
  163.21,
  170.28,
  171.09,
  172.28,
  173.78,
  175.76,
  175.57,
  175.83,
  175.99,
  175.15,
  176.3,
  175.15,
  175.21,
  174.36],
 7: [175.13,
  173.81,
  178.15,
  179.52,
  170.16,
  142.4,
  131.32,
  137.84,
  148.61,
  163.41,
  151.75,
  158.89,
  140.1,
  128.35,
  147.56,
  162.41,
  154.92,
  152.14,
  149.56,
  154.06,
  151.37,
  154.11,
  150.94,
  158.36,
  144.2,
  144.31,
  135.01,
  141.79,
  170.66,
  176.41],
 8: [176.45,
  177.65,
  173.75,
  174.53,
  177.36,
  175.88,
  176.2,
  171.64,
  175.43,
  171.52,
  173.69,
  176.73,
  176.03,
  122.92,
  118.21,
  128.94,
  117.2,
  177.5,
  166.82,
  147.48,
  165.18,
  130.34,
  175.48,
  176.22,
  168.27,
  128.41,
  152.76,
  174.74,
  175.15,
  173.46],
 9: [176.47,
  177.33,
  176.41,
  176.06,
  176.39,
  174.67,
  176.75,
  174.5,
  175.09,
  173.3,
  175.55,
  171.32,
  168.12,
  172.61,
  175.15,
  171.14,
  169.27,
  163.59,
  164.23,
  158.19,
  171.9,
  171.31,
  176.52,
  174.93,
  176.71,
  177.27,
  175.78,
  174.54,
  175.46,
  174.83],
 10: [172.52,
  175.75,
  171.18,
  175.29,
  179.74,
  173.03,
  25.18,
  97.64,
  77.3,
  165.93,
  178.3,
  175.85,
  176.94,
  174.25,
  172.55,
  176.52,
  178.82,
  177.02,
  178.56,
  178.16,
  178.97,
  175.46,
  177.68,
  176.64,
  177.95,
  176.78,
  177.75,
  176.7,
  177.38,
  175.42],
 11: [175.56,
  176.43,
  176.69,
  176.12,
  178.46,
  176.26,
  176.22,
  176.13,
  177.84,
  175.09,
  174.05,
  172.91,
  170.28,
  171.8,
  166.28,
  162.96,
  157.86,
  154.3,
  163.77,
  166.47,
  170.22,
  173.52,
  175.98,
  175.13,
  175.76,
  176.54,
  175.86,
  175.34,
  176.11,
  177.18],
 12: [175.98,
  175.62,
  175.73,
  176.99,
  176.09,
  175.85,
  177.65,
  177.3,
  177.04,
  176.54,
  176.92,
  177.15,
  175.85,
  177.04,
  178.05,
  174.68,
  140.71,
  155.2,
  155.38,
  168.05,
  178.47,
  174.36,
  176.71,
  176.69,
  176.94,
  177.07,
  176.15,
  176.91,
  176.51,
  176.04],
 13: [177.94,
  179.34,
  178.9,
  177.75,
  177.25,
  178.73,
  175.35,
  175.79,
  176.51,
  176.14,
  174.51,
  174.66,
  176.83,
  175.82,
  171.57,
  171.8,
  176.9,
  171.73,
  172.79,
  169.74,
  176.8,
  177.31,
  175.22,
  176.51,
  174.1,
  174.21,
  175.15,
  175.35,
  174.84,
  174.98],
 14: [176.01,
  177.12,
  176.84,
  176.0,
  176.99,
  176.93,
  176.72,
  176.28,
  177.44,
  176.35,
  178.14,
  175.53,
  171.68,
  173.18,
  173.34,
  175.86,
  161.63,
  170.62,
  175.03,
  176.29,
  176.76,
  177.66,
  176.3,
  176.9,
  177.19,
  177.56,
  178.2,
  176.78,
  177.61,
  176.99],
 15: [172.49,
  174.3,
  172.59,
  172.73,
  174.25,
  174.41,
  173.06,
  179.52,
  177.32,
  178.0,
  175.19,
  175.25,
  168.0,
  172.14,
  174.35,
  174.07,
  175.41,
  175.07,
  175.88,
  173.51,
  173.04,
  173.53,
  172.92,
  175.51,
  172.67,
  174.4,
  173.37,
  173.76,
  175.41,
  173.81],
 16: [178.48,
  179.98,
  179.36,
  177.11,
  179.77,
  179.07,
  176.55,
  91.3,
  145.67,
  120.34,
  123.42,
  104.05,
  124.5,
  105.62,
  95.4,
  131.9,
  106.92,
  174.15,
  178.92,
  178.57,
  178.01,
  179.79,
  179.21,
  178.98,
  178.24,
  178.3,
  178.97,
  179.93,
  179.65,
  178.91],
 17: [175.3,
  176.52,
  176.41,
  174.36,
  174.59,
  177.45,
  176.54,
  170.6,
  172.42,
  165.31,
  165.82,
  169.2,
  167.18,
  169.0,
  174.84,
  167.84,
  166.49,
  172.55,
  174.28,
  169.43,
  172.62,
  169.26,
  175.28,
  171.94,
  175.33,
  175.55,
  177.59,
  178.19,
  177.39,
  178.0],
 18: [177.04,
  177.42,
  176.76,
  174.81,
  160.37,
  167.93,
  167.44,
  170.0,
  170.16,
  166.36,
  170.12,
  174.23,
  172.45,
  172.78,
  173.07,
  174.43,
  175.73,
  175.78,
  176.42,
  176.32,
  176.44,
  176.22,
  176.86,
  177.24,
  176.54,
  177.62,
  176.08,
  176.33,
  176.43,
  176.83],
 19: [176.71,
  177.31,
  176.55,
  175.81,
  175.56,
  176.49,
  177.43,
  170.42,
  167.55,
  163.14,
  165.3,
  174.72,
  177.1,
  175.88,
  174.91,
  176.69,
  175.18,
  176.26,
  177.41,
  176.16,
  176.32,
  176.15,
  175.83,
  176.6,
  176.1,
  175.17,
  176.28,
  176.55,
  176.71,
  176.68],
 20: [177.67,
  177.36,
  175.76,
  173.25,
  172.18,
  167.31,
  148.49,
  123.03,
  121.5,
  152.4,
  127.69,
  168.98,
  173.08,
  172.76,
  175.67,
  175.97,
  176.1,
  176.39,
  176.15,
  177.59,
  177.6,
  177.0,
  176.51,
  176.74,
  176.98,
  177.28,
  176.75,
  177.98,
  178.15,
  177.79],
 21: [177.16,
  177.55,
  176.75,
  177.95,
  177.71,
  178.85,
  175.31,
  174.0,
  175.18,
  172.83,
  175.54,
  175.17,
  176.41,
  176.26,
  175.04,
  176.45,
  176.7,
  177.45,
  177.72,
  177.26,
  176.74,
  177.39,
  178.17,
  176.63,
  178.27,
  176.71,
  176.62,
  176.57,
  176.78,
  177.18],
 22: [175.18,
  175.7,
  176.95,
  176.73,
  175.63,
  176.59,
  176.11,
  176.25,
  175.72,
  176.86,
  176.16,
  176.22,
  176.82,
  179.65,
  179.62,
  174.39,
  177.42,
  174.58,
  171.79,
  173.84,
  178.08,
  175.01,
  176.24,
  176.28,
  176.3,
  176.65,
  176.4,
  177.09,
  176.57,
  176.19],
 23: [172.73,
  171.65,
  172.57,
  173.15,
  174.91,
  176.55,
  175.01,
  176.48,
  171.22,
  174.48,
  172.15,
  164.55,
  172.59,
  168.06,
  174.66,
  175.33,
  173.96,
  174.98,
  175.13,
  174.93,
  174.64,
  174.73,
  173.82,
  174.63,
  174.71,
  174.89,
  174.69,
  174.17,
  174.93,
  174.98],
 24: [172.16,
  174.07,
  171.27,
  171.54,
  171.53,
  171.59,
  173.42,
  174.37,
  172.54,
  172.26,
  171.13,
  170.14,
  91.91,
  123.22,
  27.68,
  87.29,
  46.76,
  79.24,
  165.34,
  84.32,
  29.6,
  172.42,
  175.84,
  172.18,
  173.9,
  173.36,
  176.73,
  175.12,
  175.56,
  174.99]}

#DTW FUNCTION:
def dtw(s, t, window):
    n, m = len(s), len(t)
    w = np.max([window, abs(n-m)])
    dtw_matrix = np.zeros((n+1, m+1))
    
    for i in range(n+1):
        for j in range(m+1):
            dtw_matrix[i, j] = np.inf
    dtw_matrix[0, 0] = 0
    
    for i in range(1, n+1):
        for j in range(np.max([1, i-w]), np.min([m, i+w])+1):
            dtw_matrix[i, j] = 0
    
    for i in range(1, n+1):
        for j in range(np.max([1, i-w]), np.min([m, i+w])+1):
            cost = abs(s[i-1] - t[j-1])
            # take last min from a square box
            last_min = np.min([dtw_matrix[i-1, j], dtw_matrix[i, j-1], dtw_matrix[i-1, j-1]])
            dtw_matrix[i, j] = cost + last_min
    return dtw_matrix

def get_label_index(index,hand,results):
    output=None
    for idx,classification in enumerate(results.multi_handedness):
        if classification.classification[0].index==index:
            #Process results
            label=classification.classification[0].index
            score=classification.classification[0].score
            text='{} {}'.format(label,round(score,2))
            
            #Extract coordinates:
            coords=tuple(np.multiply(
                np.array((hand.landmark[mp_hands.HandLandmark.INDEX_FINGER_TIP].x,hand.landmark[mp_hands.HandLandmark.INDEX_FINGER_TIP].y)),
            [640,480]).astype(int))
            
            output=text,coords
            
    return output
def get_label_middle(index,hand,results):
    output=None
    for idx,classification in enumerate(results.multi_handedness):
        if classification.classification[0].index==index:
            #Process results
            label=classification.classification[0].index
            score=classification.classification[0].score
            text='{} {}'.format(label,round(score,2))
            
            #Extract coordinates:
            coords=tuple(np.multiply(
                np.array((hand.landmark[mp_hands.HandLandmark.MIDDLE_FINGER_TIP].x,hand.landmark[mp_hands.HandLandmark.MIDDLE_FINGER_TIP].y)),
            [640,480]).astype(int))
            
            output=text,coords
            
    return output

def get_label_ring(index,hand,results):
    output=None
    for idx,classification in enumerate(results.multi_handedness):
        if classification.classification[0].index==index:
            #Process results
            label=classification.classification[0].index
            score=classification.classification[0].score
            text='{} {}'.format(label,round(score,2))
            
            #Extract coordinates:
            coords=tuple(np.multiply(
                np.array((hand.landmark[mp_hands.HandLandmark.RING_FINGER_TIP].x,hand.landmark[mp_hands.HandLandmark.RING_FINGER_TIP].y)),
            [640,480]).astype(int))
            
            output=text,coords
            
    return output

def get_label_pinky(index,hand,results):
    output=None
    for idx,classification in enumerate(results.multi_handedness):
        if classification.classification[0].index==index:
            #Process results
            label=classification.classification[0].index
            score=classification.classification[0].score
            text='{} {}'.format(label,round(score,2))
            
            #Extract coordinates:
            coords=tuple(np.multiply(
                np.array((hand.landmark[mp_hands.HandLandmark.PINKY_TIP].x,hand.landmark[mp_hands.HandLandmark.PINKY_TIP].y)),
            [640,480]).astype(int))
            
            output=text,coords
            
    return output

def find_minimum_index(arr):
    if not arr:
        return None  # Return None if the array is empty

    min_index = 0  # Assume the first element is the minimum
    for i in range(1, len(arr)):
        if arr[i] < arr[min_index]:
            min_index = i

    return min_index


# Initialize the array to store the angle values
angle_array10 = [0] * 30
X1 = [0] * 30
Y1 = [0] * 30

angle_array20 = [0] * 30
X2 = [0] * 30
Y2 = [0] * 30

angle_array30 = [0] * 30
X3 = [0] * 30
Y3 = [0] * 30

angle_array40 = [0] * 30
X4 = [0] * 30
Y4 = [0] * 30

angle_array11 = [0] * 30
X5 = [0] * 30
Y5 = [0] * 30

angle_array21 = [0] * 30
X6 = [0] * 30
Y6 = [0] * 30

angle_array31 = [0] * 30
X7 = [0] * 30
Y7 = [0] * 30

angle_array41 = [0] * 30
X8 = [0] * 30
Y8 = [0] * 30

ptrn=[]

cap = cv2.VideoCapture(1)
stree=""
lst=[180.00,180.00,180.00,180.00]
lst2=[180.00,180.00,180.00,180.00]
with mp_hands.Hands(min_detection_confidence=0.8, min_tracking_confidence=0.6,max_num_hands=2) as hands: 
    while cap.isOpened():
        ret, frame = cap.read()
        
        # BGR 2 RGB
        image = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
        
        # Flip on horizontal
        #image = cv2.flip(image, 1)
        
        # Set flag
        image.flags.writeable = False
        
        # Detections
        results = hands.process(image)
        
        # Set flag to true
        image.flags.writeable = True
        
        # RGB 2 BGR
        image = cv2.cvtColor(image, cv2.COLOR_RGB2BGR)
        
        # Detections
        #print(results)
        
        # Rendering results
        if results.multi_hand_landmarks:
            # Get the number of detected hands
            num_hands = len(results.multi_hand_landmarks)
            
            for num, hand in enumerate(results.multi_hand_landmarks):
                mp_drawing.draw_landmarks(image, hand, mp_hands.HAND_CONNECTIONS)
                # Draw angles to image from joint list
                draw_finger_angles(image, results, joint_list,lst,lst2)
                #Render left or right detection
                """
                if get_label(num,hand,results):
                    text,coord=get_label(num,hand,results)
                    mindex=find_dis(coord[0],coord[1])
                    #cv2.putText(image,str(coord[0])+","+str(coord[1]),coord,cv2.FONT_HERSHEY_SIMPLEX,1,(255,255,255),2,cv2.LINE_AA)# font size, color,line size,line type
                """
                if get_label1b(num,hand,results):
                    text1,coord1=get_label_index(num,hand,results)
                    if num_hands==1:   
                        index1 = find_minimum_index(angle_array10)
                        #print(index1)
                        mindex1=find_dis(X1[index1],Y1[index1])
                        angle_array10.append(lst[0])
                        X1.append(coord1[0])
                        Y1.append(coord1[1])
                        if len(angle_array10) > 30:
                            angle_array10.pop(0)
                            X1.pop(0)
                            Y1.pop(0)
                        #cv2.putText(image,str(coord1[0])+","+str(coord1[1]),coord1,cv2.FONT_HERSHEY_SIMPLEX,1,(255,255,255),2,cv2.LINE_AA)# font size, color,line size,line type
                        #print(dtw(d1[0], angle_array10, 3)[-1][-1],dtw(d1[1], angle_array10, 3)[-1][-1],dtw(d1[2], angle_array10, 3)[-1][-1],dtw(d1[3], angle_array10, 3)[-1][-1])
                        if dtw(d1[0], angle_array10, 3)[-1][-1]<420 or dtw(d1[1], angle_array10, 3)[-1][-1]<100 or dtw(d1[2], angle_array10, 3)[-1][-1]<450 or dtw(d1[3], angle_array10, 3)[-1][-1]<100:
                            if ltr[mindex1]=="*":
                                stree=stree[0:-1]
                            else:
                                stree=stree+ltr[mindex1]
                            for i in range(30):
                                angle_array10[i] = 178
                            sleep(0.99)

                    elif num_hands==2:
                        if num==0:
                            index1 = find_minimum_index(angle_array10)
                            mindex1=find_dis(X1[index1],Y1[index1])
                            angle_array10.append(lst[0])
                            X1.append(coord1[0])
                            Y1.append(coord1[1])
                            if len(angle_array10) > 30:
                                angle_array10.pop(0)
                                X1.pop(0)
                                Y1.pop(0)
                            #cv2.putText(image,str(coord1[0])+","+str(coord1[1]),coord1,cv2.FONT_HERSHEY_SIMPLEX,1,(255,255,255),2,cv2.LINE_AA)# font size, color,line size,line type
                            #print(dtw(d1[24], angle_array, 3)[-1][-1],dtw(d1[21], angle_array, 3)[-1][-1],dtw(d1[22], angle_array, 3)[-1][-1],dtw(d1[23], angle_array, 3)[-1][-1])
                            #print(dtw(d1[0], angle_array10, 3)[-1][-1],dtw(d1[1], angle_array10, 3)[-1][-1],dtw(d1[2], angle_array10, 3)[-1][-1],dtw(d1[3], angle_array10, 3)[-1][-1])
                            if dtw(d1[0], angle_array10, 3)[-1][-1]<420 or dtw(d1[1], angle_array10, 3)[-1][-1]<100 or dtw(d1[2], angle_array10, 3)[-1][-1]<450 or dtw(d1[3], angle_array10, 3)[-1][-1]<100:
                                if ltr[mindex1]=="*":
                                    stree=stree[0:-1]
                                else:
                                    stree=stree+ltr[mindex1]
                                for i in range(30):
                                    angle_array10[i] = 178
                                sleep(0.99)
                        if num==1:
                            index1 = find_minimum_index(angle_array11)
                            mindex1=find_dis(X5[index1],Y5[index1])
                            angle_array11.append(lst2[0])
                            X5.append(coord1[0])
                            Y5.append(coord1[1])
                            if len(angle_array11) > 30:
                                angle_array11.pop(0)
                                X5.pop(0)
                                Y5.pop(0)
                            #cv2.putText(image,str(coord1[0])+","+str(coord1[1]),coord1,cv2.FONT_HERSHEY_SIMPLEX,1,(255,255,255),2,cv2.LINE_AA)# font size, color,line size,line type
                            #print(dtw(d1[24], angle_array, 3)[-1][-1],dtw(d1[21], angle_array, 3)[-1][-1],dtw(d1[22], angle_array, 3)[-1][-1],dtw(d1[23], angle_array, 3)[-1][-1])
                            print(dtw(d1[0], angle_array11, 3)[-1][-1],dtw(d1[1], angle_array11, 3)[-1][-1],dtw(d1[2], angle_array11, 3)[-1][-1],dtw(d1[3], angle_array11, 3)[-1][-1])
                            if dtw(d1[0], angle_array11, 3)[-1][-1]<420 or dtw(d1[1], angle_array11, 3)[-1][-1]<100 or dtw(d1[2], angle_array11, 3)[-1][-1]<450 or dtw(d1[3], angle_array11, 3)[-1][-1]<100:
                                if ltr[mindex1]=="*":
                                    stree=stree[0:-1]
                                else:
                                    stree=stree+ltr[mindex1]
                                for i in range(30):
                                    angle_array11[i] = 178
                                sleep(0.99)
                """               
                if get_label2b(num,hand,results):
                    text2,coord2=get_label_middle(num,hand,results)
                    if num_hands==1:   
                        index2 = find_minimum_index(angle_array20)
                        #print(index1)
                        mindex2=find_dis(X2[index2],Y2[index2])
                        angle_array20.append(lst[1])
                        X2.append(coord2[0])
                        Y2.append(coord2[1])
                        if len(angle_array20) > 30:
                            angle_array20.pop(0)
                            X2.pop(0)
                            Y2.pop(0)
                        #cv2.putText(image,str(coord1[0])+","+str(coord1[1]),coord1,cv2.FONT_HERSHEY_SIMPLEX,1,(255,255,255),2,cv2.LINE_AA)# font size, color,line size,line type
                        #print(dtw(d2[0], angle_array20, 3)[-1][-1],dtw(d2[1], angle_array20, 3)[-1][-1],dtw(d2[2], angle_array20, 3)[-1][-1],dtw(d2[3], angle_array20, 3)[-1][-1])
                        if dtw(d2[0], angle_array20, 3)[-1][-1]<2500 or dtw(d2[1], angle_array20, 3)[-1][-1]<350 or dtw(d2[2], angle_array20, 3)[-1][-1]<330 or dtw(d2[3], angle_array20, 3)[-1][-1]<460:
                            if ltr[mindex2]=="*":
                                stree=stree[0:-1]
                            else:
                                stree=stree+ltr[mindex2]
                            for i in range(30):
                                angle_array20[i] = 178
                            sleep(0.99)

                    elif num_hands==2:
                        if num==0:
                            index2 = find_minimum_index(angle_array20)
                            mindex2=find_dis(X2[index2],Y2[index2])
                            angle_array20.append(lst[1])
                            X2.append(coord2[0])
                            Y2.append(coord2[1])
                            if len(angle_array20) > 30:
                                angle_array20.pop(0)
                                X2.pop(0)
                                Y2.pop(0)
                            #cv2.putText(image,str(coord1[0])+","+str(coord1[1]),coord1,cv2.FONT_HERSHEY_SIMPLEX,1,(255,255,255),2,cv2.LINE_AA)# font size, color,line size,line type
                            #print(dtw(d1[24], angle_array, 3)[-1][-1],dtw(d1[21], angle_array, 3)[-1][-1],dtw(d1[22], angle_array, 3)[-1][-1],dtw(d1[23], angle_array, 3)[-1][-1])
                            if dtw(d2[0], angle_array20, 3)[-1][-1]<10 or dtw(d2[1], angle_array20, 3)[-1][-1]<10 or dtw(d2[2], angle_array20, 3)[-1][-1]<10 or dtw(d2[3], angle_array20, 3)[-1][-1]<10:
                                if ltr[mindex2]=="*":
                                    stree=stree[0:-1]
                                else:
                                    stree=stree+ltr[mindex2]
                                for i in range(30):
                                    angle_array20[i] = 178
                                sleep(0.99)
                        if num==1:
                            index2 = find_minimum_index(angle_array21)
                            mindex1=find_dis(X6[index2],Y6[index2])
                            angle_array21.append(lst2[1])
                            X6.append(coord2[0])
                            Y6.append(coord2[1])
                            if len(angle_array21) > 30:
                                angle_array21.pop(0)
                                X6.pop(0)
                                Y6.pop(0)
                            #cv2.putText(image,str(coord1[0])+","+str(coord1[1]),coord1,cv2.FONT_HERSHEY_SIMPLEX,1,(255,255,255),2,cv2.LINE_AA)# font size, color,line size,line type
                            #print(dtw(d1[24], angle_array, 3)[-1][-1],dtw(d1[21], angle_array, 3)[-1][-1],dtw(d1[22], angle_array, 3)[-1][-1],dtw(d1[23], angle_array, 3)[-1][-1])
                            if dtw(d2[0], angle_array21, 3)[-1][-1]<10 or dtw(d2[1], angle_array21, 3)[-1][-1]<10 or dtw(d2[2], angle_array21, 3)[-1][-1]<10 or dtw(d2[3], angle_array21, 3)[-1][-1]<10:
                                if ltr[mindex2]=="*":
                                    stree=stree[0:-1]
                                else:
                                    stree=stree+ltr[mindex2]
                                for i in range(30):
                                    angle_array21[i] = 178
                                sleep(0.99)
                if get_label3b(num,hand,results):
                    text3,coord3=get_label_ring(num,hand,results)
                    if num_hands==1:   
                        index3 = find_minimum_index(angle_array30)
                        #print(index1)
                        mindex3=find_dis(X3[index3],Y3[index3])
                        angle_array30.append(lst[2])
                        X3.append(coord3[0])
                        Y3.append(coord3[1])
                        if len(angle_array30) > 30:
                            angle_array30.pop(0)
                            X3.pop(0)
                            Y3.pop(0)
                        #cv2.putText(image,str(coord1[0])+","+str(coord1[1]),coord1,cv2.FONT_HERSHEY_SIMPLEX,1,(255,255,255),2,cv2.LINE_AA)# font size, color,line size,line type
                        #print(dtw(d3[0], angle_array30, 3)[-1][-1],dtw(d3[1], angle_array30, 3)[-1][-1],dtw(d3[2], angle_array30, 3)[-1][-1],dtw(d3[3], angle_array30, 3)[-1][-1])
                        if dtw(d3[0], angle_array30, 3)[-1][-1]<10 or dtw(d3[1], angle_array30, 3)[-1][-1]<10 or dtw(d3[2], angle_array30, 3)[-1][-1]<10 or dtw(d3[3], angle_array30, 3)[-1][-1]<10:
                            if ltr[mindex3]=="*":
                                stree=stree[0:-1]
                            else:
                                stree=stree+ltr[mindex3]
                            for i in range(30):
                                angle_array30[i] = 178
                            sleep(0.99)

                    elif num_hands==2:
                        if num==0:
                            index3 = find_minimum_index(angle_array30)
                            mindex3=find_dis(X3[index3],Y3[index3])
                            angle_array30.append(lst[2])
                            X3.append(coord3[0])
                            Y3.append(coord3[1])
                            if len(angle_array30) > 30:
                                angle_array30.pop(0)
                                X3.pop(0)
                                Y3.pop(0)
                            #cv2.putText(image,str(coord1[0])+","+str(coord1[1]),coord1,cv2.FONT_HERSHEY_SIMPLEX,1,(255,255,255),2,cv2.LINE_AA)# font size, color,line size,line type
                            #print(dtw(d1[24], angle_array, 3)[-1][-1],dtw(d1[21], angle_array, 3)[-1][-1],dtw(d1[22], angle_array, 3)[-1][-1],dtw(d1[23], angle_array, 3)[-1][-1])
                            if dtw(d3[0], angle_array30, 3)[-1][-1]<10 or dtw(d3[1], angle_array30, 3)[-1][-1]<10 or dtw(d3[2], angle_array30, 3)[-1][-1]<10 or dtw(d3[3], angle_array30, 3)[-1][-1]<10:
                                if ltr[mindex3]=="*":
                                    stree=stree[0:-1]
                                else:
                                    stree=stree+ltr[mindex3]
                                for i in range(30):
                                    angle_array30[i] = 178
                                sleep(0.99)
                        if num==1:
                            index3 = find_minimum_index(angle_array31)
                            mindex1=find_dis(X7[index3],Y7[index3])
                            angle_array31.append(lst2[2])
                            X7.append(coord3[0])
                            Y7.append(coord3[1])
                            if len(angle_array31) > 30:
                                angle_array31.pop(0)
                                X7.pop(0)
                                Y7.pop(0)
                            #cv2.putText(image,str(coord1[0])+","+str(coord1[1]),coord1,cv2.FONT_HERSHEY_SIMPLEX,1,(255,255,255),2,cv2.LINE_AA)# font size, color,line size,line type
                            #print(dtw(d1[24], angle_array, 3)[-1][-1],dtw(d1[21], angle_array, 3)[-1][-1],dtw(d1[22], angle_array, 3)[-1][-1],dtw(d1[23], angle_array, 3)[-1][-1])
                            if dtw(d3[0], angle_array31, 3)[-1][-1]<10 or dtw(d3[1], angle_array31, 3)[-1][-1]<10 or dtw(d3[2], angle_array31, 3)[-1][-1]<10 or dtw(d3[3], angle_array31, 3)[-1][-1]<10:
                                if ltr[mindex3]=="*":
                                    stree=stree[0:-1]
                                else:
                                    stree=stree+ltr[mindex3]
                                for i in range(30):
                                    angle_array31[i] = 178
                                sleep(0.99)
                if get_label4b(num,hand,results):
                    text4,coord4=get_label_pinky(num,hand,results)
                    if num_hands==1:   
                        index4 = find_minimum_index(angle_array40)
                        #print(index1)
                        mindex4=find_dis(X4[index4],Y4[index4])
                        angle_array40.append(lst[3])
                        X4.append(coord4[0])
                        Y4.append(coord4[1])
                        if len(angle_array40) > 30:
                            angle_array40.pop(0)
                            X4.pop(0)
                            Y4.pop(0)
                        #cv2.putText(image,str(coord1[0])+","+str(coord1[1]),coord1,cv2.FONT_HERSHEY_SIMPLEX,1,(255,255,255),2,cv2.LINE_AA)# font size, color,line size,line type
                        #print(dtw(d4[0], angle_array40, 3)[-1][-1],dtw(d4[1], angle_array40, 3)[-1][-1],dtw(d4[2], angle_array40, 3)[-1][-1],dtw(d4[3], angle_array40, 3)[-1][-1])
                        if dtw(d4[0], angle_array40, 3)[-1][-1]<10 or dtw(d4[1], angle_array40, 3)[-1][-1]<10 or dtw(d4[2], angle_array40, 3)[-1][-1]<10 or dtw(d4[3], angle_array40, 3)[-1][-1]<10:
                            if ltr[mindex4]=="*":
                                stree=stree[0:-1]
                            else:
                                stree=stree+ltr[mindex4]
                            for i in range(30):
                                angle_array40[i] = 178
                            sleep(0.99)

                    elif num_hands==2:
                        if num==0:
                            index4 = find_minimum_index(angle_array40)
                            mindex4=find_dis(X4[index4],Y4[index4])
                            angle_array40.append(lst[3])
                            X4.append(coord4[0])
                            Y4.append(coord4[1])
                            if len(angle_array40) > 30:
                                angle_array40.pop(0)
                                X4.pop(0)
                                Y4.pop(0)
                            #cv2.putText(image,str(coord1[0])+","+str(coord1[1]),coord1,cv2.FONT_HERSHEY_SIMPLEX,1,(255,255,255),2,cv2.LINE_AA)# font size, color,line size,line type
                            #print(dtw(d1[24], angle_array, 3)[-1][-1],dtw(d1[21], angle_array, 3)[-1][-1],dtw(d1[22], angle_array, 3)[-1][-1],dtw(d1[23], angle_array, 3)[-1][-1])
                            if dtw(d4[0], angle_array40, 3)[-1][-1]<10 or dtw(d4[1], angle_array40, 3)[-1][-1]<10 or dtw(d4[2], angle_array40, 3)[-1][-1]<10 or dtw(d4[3], angle_array40, 3)[-1][-1]<10:
                                if ltr[mindex4]=="*":
                                    stree=stree[0:-1]
                                else:
                                    stree=stree+ltr[mindex4]
                                for i in range(30):
                                    angle_array40[i] = 178
                                sleep(0.99)
                        if num==1:
                            index4 = find_minimum_index(angle_array41)
                            mindex1=find_dis(X8[index4],Y8[index4])
                            angle_array41.append(lst2[3])
                            X8.append(coord4[0])
                            Y8.append(coord4[1])
                            if len(angle_array41) > 30:
                                angle_array41.pop(0)
                                X8.pop(0)
                                Y8.pop(0)
                            #cv2.putText(image,str(coord1[0])+","+str(coord1[1]),coord1,cv2.FONT_HERSHEY_SIMPLEX,1,(255,255,255),2,cv2.LINE_AA)# font size, color,line size,line type
                            #print(dtw(d1[24], angle_array, 3)[-1][-1],dtw(d1[21], angle_array, 3)[-1][-1],dtw(d1[22], angle_array, 3)[-1][-1],dtw(d1[23], angle_array, 3)[-1][-1])
                            if dtw(d4[0], angle_array41, 3)[-1][-1]<10 or dtw(d4[1], angle_array41, 3)[-1][-1]<10 or dtw(d4[2], angle_array41, 3)[-1][-1]<10 or dtw(d4[3], angle_array41, 3)[-1][-1]<10:
                                if ltr[mindex4]=="*":
                                    stree=stree[0:-1]
                                else:
                                    stree=stree+ltr[mindex4]
                                for i in range(30):
                                    angle_array41[i] = 178
                                sleep(0.99)
                """
        cv2.putText(image,stree,(10,50),cv2.FONT_HERSHEY_SIMPLEX,1,(255,255,255),2,cv2.LINE_AA)
        # Save our image    
        #cv2.imwrite(os.path.join('Output Images', '{}.jpg'.format(uuid.uuid1())), image)
        cv2.imshow('Hand Tracking', image)

        if cv2.waitKey(10) & 0xFF == ord('q'):
            break

cap.release()
cv2.destroyAllWindows()